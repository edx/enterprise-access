# Generated by Django 3.2.11 on 2022-01-21 21:39

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields
import simple_history.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='SubsidyRequestCustomerConfiguration',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('enterprise_customer_uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('subsidy_requests_enabled', models.BooleanField(default=False, help_text='Whether or not subsidy requests are enabled for an enterprise.')),
                ('subsidy_type', models.CharField(choices=[('License', 'License Subsidy'), ('Coupon', 'Coupon Subsidy')], help_text='Which type of subsidy is used to grant access.', max_length=32)),
                ('pending_request_reminder_frequency', models.CharField(choices=[('Never', 'Never Remind'), ('Daily', 'Once a Day'), ('Weekly', 'Once a Week'), ('Fortnightly', 'Once Every Two Weeks'), ('Monthly', 'Once a Month')], help_text='How frequently to send reminders to admins that there are requests pending.', max_length=32)),
                ('changed_by', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HistoricalSubsidyRequestCustomerConfiguration',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('enterprise_customer_uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('subsidy_requests_enabled', models.BooleanField(default=False, help_text='Whether or not subsidy requests are enabled for an enterprise.')),
                ('subsidy_type', models.CharField(choices=[('License', 'License Subsidy'), ('Coupon', 'Coupon Subsidy')], help_text='Which type of subsidy is used to grant access.', max_length=32)),
                ('pending_request_reminder_frequency', models.CharField(choices=[('Never', 'Never Remind'), ('Daily', 'Once a Day'), ('Weekly', 'Once a Week'), ('Fortnightly', 'Once Every Two Weeks'), ('Monthly', 'Once a Month')], help_text='How frequently to send reminders to admins that there are requests pending.', max_length=32)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('changed_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical subsidy request customer configuration',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
